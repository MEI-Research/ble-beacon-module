/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package com.pilrhealth.beacon

import android.os.Build
import androidx.annotation.RequiresApi
import com.pilrhealth.AppMessageQueue
import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.common.Log
import org.appcelerator.kroll.common.TiConfig
import org.appcelerator.titanium.TiApplication

@RequiresApi(Build.VERSION_CODES.O)
@Kroll.module(name = "BleBeacon", id = "com.pilrhealth.beacon")
class BleBeaconModule: KrollModule() {

	// NOTE: You can develop Titanium Android modules in Android Studio. Follow these three steps:
	//   1. Build the empty module
	//   2. Drag the "build" folder into Android Studio
	//   3. Start developing! All dependencies and code completions are supported!

	companion object {
		// Standard Debugging variables
		private const val LCAT = "BleBeaconModule"
		private val DBG = TiConfig.LOGD

		// You can define constants with @Kroll.constant, for example:
		// @Kroll.constant private val EXTERNAL_NAME = "EXTERNAL_NAME"

		@Kroll.onAppCreate
		fun onAppCreate(app: TiApplication?) {
			// THis log message doesn't work for some reason, but this method gets called.
			// The foreground service will cause the TiApplication to be created and this is called.
			Log.d(LCAT, "inside onAppCreate")
			// put module init code that needs to run when the application is created
			BeaconDetector.start("onAppCreate")
		}
	}

	init {
		AppMessageQueue.appLog("BleBeaconModule created")
	}

	@Kroll.method
	fun startBeaconDetection() {
		Log.e(LCAT, "starting detection")
		AppMessageQueue.owner = this
		return BeaconDetector.start("startBeaconDetection")
	}

	@Kroll.method
	fun setFriendList(str: String) {
		Log.e(LCAT, "DEBUG>>> setting friendList: '$str'")
		Encounter.Companion.friendList = str
		Log.e(LCAT, "DEBUG>>> friendList = '${Encounter.Companion.friendList}'")
	}

	@Kroll.method
	fun fetchEvents() = AppMessageQueue.fetchMessages()

	/** This should be called when EMA logs out */
	@Kroll.method()
	fun clearAllEncounters() {
		setFriendList("")
	}

	@set:Kroll.setProperty
	var notificationTitle: String
		get() {
			return EncounterNotifier.notificationTitle
		}
		set(value) {
			Log.d(LCAT, "set notificationTitle=$value")
			EncounterNotifier.notificationTitle = value
		}

	@set:Kroll.setProperty
	var notificationText: String
		get() {
			return EncounterNotifier.notificationText
		}
		set(value) {
			EncounterNotifier.notificationText = value
		}

	@set:Kroll.setProperty
	var minDurationSecs: Long
		get() {
			return Encounter.minimumEncounterDuration / 1000
		}
		set(value) {
			Encounter.minimumEncounterDuration = value * 1000
		}

	@set:Kroll.setProperty
	var transientTimeoutSecs: Long
		get() {
			return Encounter.transientEncounterTimeout / 1000
		}
		set(value) {
			Encounter.transientEncounterTimeout = value * 1000
		}

	@set:Kroll.setProperty
	var actualTimeoutSecs: Long
		get() {
			return Encounter.actualEncounterTimeout / 1000
		}
		set(value) {
			Encounter.actualEncounterTimeout = value * 1000
		}

	@Kroll.method
	fun scanStats(): KrollDict {
		return KrollDict(BeaconDetector.scanTimes.stats())
	}

	//// test app methods - TODO: delete

	@Kroll.method
	fun example(): String {
		Log.d(LCAT, "example() called")
		return "hello world"
	}

	@Kroll.method
	fun testMethod(params: KrollDict) {
		Log.d(LCAT, "testMethod() called")

		// Access the parameters passed as an Object, e.g. "myModule.testMethod({ name: 'John Doe', flag: true })"
		val name = params.getString("name")
		val flag = params.optBoolean("flag", false)

		// Fire an event that can be added via "myModule.addEventListener('shown', ...)"
		val event = KrollDict()
		event["name"] = name
		event["flag"] = flag

		fireEvent("", event)
	}

	// Properties

	@get:Kroll.getProperty
	@set:Kroll.setProperty
	var exampleProp: String
		get() {
			Log.d(LCAT, "get example property")
			return "hello world"
		}
		set(value) {
			Log.d(LCAT, "set example property: $value")
		}
}
